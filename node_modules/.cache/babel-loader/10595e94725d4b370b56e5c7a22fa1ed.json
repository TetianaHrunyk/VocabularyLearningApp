{"ast":null,"code":"var _jsxFileName = \"/home/tania/Documents/uni/uniba2nd/TIA/vocs/src/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport Left from \"./Left\";\nimport Right from \"./Right\";\nimport django_host from \"./paths\"; //import useTranslate from \"../hooks/useTranslate\"\n\nimport UserContext from \"../contexts/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst zip = (a1, a2) => a1.map((x, i) => [x, a2[i]]);\n\nconst decksNames = localStorage.getItem(\"decksNames\").split(\",\");\nconst decksIds = localStorage.getItem(\"decksIds\").split(\",\");\nconst zipped = zip(decksIds, decksNames);\nconst keys = [\"front\", \"back\", \"user\", \"deck\"];\n\nfunction toObject(arr, keys) {\n  var rv = {};\n\n  for (var i = 0; i < arr.length; ++i) rv[keys[i]] = arr[i];\n\n  return rv;\n}\n\nconst Home = () => {\n  _s();\n\n  const {\n    username: user\n  } = useContext(UserContext);\n  const history = useHistory();\n  const [parsed, setParse] = useState(false);\n  const [text, setText] = useState(\"\");\n  const [queue, setQueue] = useState({});\n  const [add, setAdd] = useState({});\n  const [back, setBack] = useState(false);\n  const [deck, setDeck] = useState(null);\n  const [sourceLan, setSourceLan] = useState(\"en\");\n  const [targetLan, setTargetLan] = useState(\"sk\");\n  useEffect(() => {\n    window.addEventListener(\"popstate\", e => {\n      history.push(\"/\");\n      setParse(false);\n      setBack(false);\n    });\n  });\n\n  const handleParse = e => {\n    setBack(false);\n    setParse(true);\n    history.push(\"/\");\n  };\n\n  const handleText = e => {\n    setText(e.target.value);\n  };\n\n  const handleBack = e => {\n    setBack(true);\n    setParse(false);\n  };\n\n  const handlePostCards = e => {\n    e.preventDefault();\n    const postData = Object.keys(add).map(key => toObject([key, add[key], user, deck], keys));\n    postData.forEach(element => {\n      fetch(django_host + \"api/cards/\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `JWT ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(element)\n      }).then(res => {\n        return res.json();\n      }).then(data => {}).catch(err => {\n        console.log(err.message);\n      });\n    });\n    setDeck(null);\n  };\n\n  const handleWordClick = e => {\n    if (e.target.value in queue) {\n      const {\n        [e.target.value]: tmp,\n        ...rest\n      } = queue;\n      setQueue(rest);\n    } else {\n      const source = sourceLan;\n      const target = targetLan;\n      fetch(\"https://deep-translate1.p.rapidapi.com/language/translate/v2\", {\n        \"method\": \"POST\",\n        \"headers\": {\n          \"content-type\": \"application/json\",\n          \"x-rapidapi-key\": \"c07e2c5e08mshd3c51cf8cbe266dp1236c9jsn787baf24bd93\",\n          \"x-rapidapi-host\": \"deep-translate1.p.rapidapi.com\"\n        },\n        \"body\": JSON.stringify({\n          \"q\": e.target.value,\n          \"source\": source,\n          \"target\": target\n        })\n      }).then(res => res.json()).then(data => {\n        setQueue({ ...queue,\n          [e.target.value]: data.data.translations.translatedText\n        });\n      }).catch(err => {\n        setQueue({ ...queue,\n          [e.target.value]: \"Falied to translate\"\n        });\n        console.log(err.message);\n      });\n      /*setQueue({\n        ...queue,\n        [e.target.value]: \"Translation when saving api resources\",\n      });*/\n    }\n  };\n\n  function makeSelectDeck(defDeck) {\n    return zipped.map(deck => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: deck[0],\n        children: deck[1]\n      }, deck[0], false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  const handleAdd = e => {\n    if (e.target.value in add) {\n      const {\n        [e.target.value]: tmp,\n        ...rest\n      } = add;\n      setAdd(rest);\n    } else {\n      setAdd({ ...add,\n        [e.target.value]: queue[[e.target.value]]\n      });\n    }\n  };\n  /*\n    if (Object.keys(add).length !== 0) {\n      const postData = Object.keys(add).map(key => \n        toObject([key, add[key], user, deck], keys)\n      )\n      console.log(JSON.stringify(postData))\n    } else {\n      console.log(\"empty\")\n    }\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Source Language:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => setSourceLan(e.target.value),\n            defaultValue: \"en\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"en\",\n              children: \"English\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"de\",\n              children: \"German\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ru\",\n              children: \"Russian\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"sk\",\n              children: \"Slovak\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Target Language:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => setTargetLan(e.target.value),\n            defaultValue: \"sk\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"en\",\n              children: \"English\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"de\",\n              children: \"German\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ru\",\n              children: \"Russian\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"sk\",\n              children: \"Slovak\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Left, {\n            text: text,\n            parsed: parsed,\n            handleParse: handleParse,\n            handleText: handleText,\n            queue: queue,\n            handleWordClick: handleWordClick,\n            back: back,\n            handleBack: handleBack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Right, {\n            parsed: parsed,\n            queue: queue,\n            handleAdd: handleAdd,\n            add: add\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), Object.keys(add).length !== 0 ? /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [\"Add Cards to\", /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"deck\",\n            onChange: e => setDeck(e.target.value),\n            defaultValue: deck ? deck : \"-------\",\n            children: [!deck ? /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"dummy\",\n              children: \"--------\"\n            }, \"dummy\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 19\n            }, this) : \"\", makeSelectDeck(deck)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: !deck ? /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Please, select deck to add the cards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handlePostCards(e),\n            children: \"Add cards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"hVHzV3eW3KeeN7uDxkum7SKX9w0=\", false, function () {\n  return [useHistory];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/tania/Documents/uni/uniba2nd/TIA/vocs/src/components/Home.js"],"names":["useState","useEffect","useContext","Col","Row","Container","useHistory","Left","Right","django_host","UserContext","zip","a1","a2","map","x","i","decksNames","localStorage","getItem","split","decksIds","zipped","keys","toObject","arr","rv","length","Home","username","user","history","parsed","setParse","text","setText","queue","setQueue","add","setAdd","back","setBack","deck","setDeck","sourceLan","setSourceLan","targetLan","setTargetLan","window","addEventListener","e","push","handleParse","handleText","target","value","handleBack","handlePostCards","preventDefault","postData","Object","key","forEach","element","fetch","method","headers","Authorization","body","JSON","stringify","then","res","json","data","catch","err","console","log","message","handleWordClick","tmp","rest","source","translations","translatedText","makeSelectDeck","defDeck","handleAdd"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext} from \"react\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport Left from \"./Left\";\nimport Right from \"./Right\";\nimport django_host from \"./paths\"\n//import useTranslate from \"../hooks/useTranslate\"\nimport UserContext from \"../contexts/UserContext\"\n\nconst zip = (a1, a2) => a1.map((x, i) => [x, a2[i]]);\nconst decksNames = localStorage.getItem(\"decksNames\").split(\",\");\nconst decksIds = localStorage.getItem(\"decksIds\").split(\",\");\nconst zipped = zip(decksIds, decksNames);\n\nconst keys = [\"front\", \"back\", \"user\", \"deck\"]\n\nfunction toObject(arr, keys) {\n  var rv = {};\n  for (var i = 0; i < arr.length; ++i)\n    rv[keys[i]] = arr[i];\n  return rv;\n}\n\n\nconst Home = () => {\n  const { username: user } = useContext(UserContext);\n\n  const history = useHistory();\n  const [parsed, setParse] = useState(false);\n  const [text, setText] = useState(\"\");\n  const [queue, setQueue] = useState({});\n  const [add, setAdd] = useState({});\n  const [back, setBack] = useState(false);\n  const [deck, setDeck] = useState(null);\n  const [sourceLan, setSourceLan] = useState(\"en\");\n  const [targetLan, setTargetLan] = useState(\"sk\");\n\n  useEffect(() => {\n    window.addEventListener(\"popstate\", (e) => {\n      history.push(\"/\");\n      setParse(false);\n      setBack(false);\n    });\n  });\n\n  const handleParse = (e) => {\n    setBack(false);\n    setParse(true);\n    history.push(\"/\");\n  };\n\n  const handleText = (e) => {\n    setText(e.target.value);\n  };\n\n  const handleBack = (e) => {\n    setBack(true);\n    setParse(false);\n  };\n\n  const handlePostCards = (e) => {\n    e.preventDefault()\n    const postData = Object.keys(add).map(key => \n      toObject([key, add[key], user, deck], keys)\n    )\n    postData.forEach(element => {\n      fetch(django_host + \"api/cards/\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `JWT ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(element),\n      })\n        .then((res) => {\n          return res.json();\n        })\n        .then((data) => {\n          \n        })\n        .catch((err) => {\n          console.log(err.message);\n        });\n    });\n    setDeck(null);\n  };\n\n  const handleWordClick = (e) => {\n    if (e.target.value in queue) {\n      const { [e.target.value]: tmp, ...rest } = queue;\n      setQueue(rest);\n    } else {\n      \n            const source=sourceLan\n            const target=targetLan\n            fetch(\"https://deep-translate1.p.rapidapi.com/language/translate/v2\", {\n                \"method\": \"POST\",\n                \"headers\": {\n                  \"content-type\": \"application/json\",\n                  \"x-rapidapi-key\": \"c07e2c5e08mshd3c51cf8cbe266dp1236c9jsn787baf24bd93\",\n                  \"x-rapidapi-host\": \"deep-translate1.p.rapidapi.com\"\n                },\n                \"body\": JSON.stringify({\n                  \"q\": e.target.value,\n                  \"source\": source,\n                  \"target\": target\n                })\n              })\n              .then(res => res.json())\n              .then(data => {\n                setQueue({ ...queue, [e.target.value]: data.data.translations.translatedText})\n              })\n              .catch(err => {\n                setQueue({ ...queue, [e.target.value]: \"Falied to translate\"})\n                console.log(err.message)\n              })\n            \n      /*setQueue({\n        ...queue,\n        [e.target.value]: \"Translation when saving api resources\",\n      });*/\n    }\n  };\n\n  function makeSelectDeck(defDeck) {\n    return zipped.map((deck) => {\n      return (\n        <option value={deck[0]} key={deck[0]}>\n          {deck[1]}\n        </option>\n      );\n    });\n  }\n\n  const handleAdd = (e) => {\n    if (e.target.value in add) {\n      const { [e.target.value]: tmp, ...rest } = add;\n      setAdd(rest);\n    } else {\n      setAdd({ ...add, [e.target.value]: queue[[e.target.value]] });\n    }\n  };\n/*\n  if (Object.keys(add).length !== 0) {\n    const postData = Object.keys(add).map(key => \n      toObject([key, add[key], user, deck], keys)\n    )\n    console.log(JSON.stringify(postData))\n  } else {\n    console.log(\"empty\")\n  }\n */\n   \n\n  return (\n    <div className=\"home\">\n      <h2>Home</h2>\n      <br />\n      <Container>\n        <Row>\n          <Col>\n            <label>Source Language:</label>\n            <select\n              onChange={(e) => setSourceLan(e.target.value)}\n              defaultValue=\"en\"\n            >\n              <option value=\"en\">English</option>\n              <option value=\"de\">German</option>\n              <option value=\"ru\">Russian</option>\n              <option value=\"sk\">Slovak</option>\n            </select>\n          </Col>\n          <Col>\n            <label>Target Language:</label>\n            <select\n              onChange={(e) => setTargetLan(e.target.value)}\n              defaultValue=\"sk\"\n            >\n              <option value=\"en\">English</option>\n              <option value=\"de\">German</option>\n              <option value=\"ru\">Russian</option>\n              <option value=\"sk\">Slovak</option>\n            </select>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Left\n              text={text}\n              parsed={parsed}\n              handleParse={handleParse}\n              handleText={handleText}\n              queue={queue}\n              handleWordClick={handleWordClick}\n              back={back}\n              handleBack={handleBack}\n            />\n          </Col>\n          <Col>\n            <Right\n              parsed={parsed}\n              queue={queue}\n              handleAdd={handleAdd}\n              add={add}\n            />\n          </Col>\n        </Row>\n        {Object.keys(add).length !== 0 ? (\n          <Row>\n            <Col>\n              Add Cards to\n              <select\n                name=\"deck\"\n                onChange={(e) => setDeck(e.target.value)}\n                defaultValue={deck ? deck : \"-------\"}\n              >\n                {!deck ? (\n                  <option key=\"dummy\" value=\"dummy\">\n                    --------\n                  </option>\n                ) : (\n                  \"\"\n                )}\n                {makeSelectDeck(deck)}\n              </select>\n            </Col>\n            <Col>\n              {!deck ? (\n                <h5>Please, select deck to add the cards</h5>\n              ) : (\n                <button onClick={(e) => handlePostCards(e)}>Add cards</button>\n              )}\n            </Col>\n          </Row>\n        ) : (\n          <div></div>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}