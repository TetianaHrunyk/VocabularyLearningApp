{"ast":null,"code":"var _jsxFileName = \"/home/tania/Documents/uni/uniba2nd/TIA/vocs/src/components/Right.js\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport UserContext from \"../contexts/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Right = ({\n  parsed,\n  queue,\n  handleAdd,\n  add\n}) => {\n  _s();\n\n  const {\n    user\n  } = useContext(UserContext);\n\n  function mapQueue(queue) {\n    return Object.keys(queue).filter(word => word !== \" \").map(word => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          minWidth: \"60%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: queue[word]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 15\n          }, this), localStorage.getItem(\"token\") ? /*#__PURE__*/_jsxDEV(\"button\", {\n            value: word,\n            onClick: handleAdd,\n            children: [\" \", word in add ? \"Drop\" : \"Add\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 48\n          }, this) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 137\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }, this)\n      }, word, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }, this);\n    });\n  }\n\n  if (!parsed) {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: \"Translations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: \"You don't have any translations yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: \"Translations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          as: \"div\",\n          style: {\n            overflowY: \"auto\",\n            maxHeight: \"400px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(CardDeck, {\n            children: mapQueue(queue)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Right, \"y3FQDew7UyrSqYkvQcTdCsLbAB8=\");\n\n_c = Right;\nexport default Right;\n\nvar _c;\n\n$RefreshReg$(_c, \"Right\");","map":{"version":3,"sources":["/home/tania/Documents/uni/uniba2nd/TIA/vocs/src/components/Right.js"],"names":["useContext","Card","CardDeck","UserContext","Right","parsed","queue","handleAdd","add","user","mapQueue","Object","keys","filter","word","map","minWidth","localStorage","getItem","overflowY","maxHeight"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,SAAhB;AAA2BC,EAAAA;AAA3B,CAAD,KAAsC;AAAA;;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAWT,UAAU,CAACG,WAAD,CAA3B;;AAEA,WAASO,QAAT,CAAkBJ,KAAlB,EAAyB;AACvB,WACEK,MAAM,CAACC,IAAP,CAAYN,KAAZ,EACCO,MADD,CACSC,IAAI,IAAIA,IAAI,KAAK,GAD1B,EAECC,GAFD,CAEMD,IAAD,IAAU;AACb,0BACE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEE,UAAAA,QAAQ,EAAE;AAAZ,SAAb;AAAA,+BACE,QAAC,IAAD,CAAM,IAAN;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA,sBACGF;AADH;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,IAAD,CAAM,IAAN;AAAA,sBACGR,KAAK,CAACQ,IAAD;AADR;AAAA;AAAA;AAAA;AAAA,kBAJF,EAOGG,YAAY,CAACC,OAAb,CAAqB,OAArB,iBAAgC;AAAQ,YAAA,KAAK,EAAIJ,IAAjB;AAAuB,YAAA,OAAO,EAAIP,SAAlC;AAAA,4BAA+CO,IAAI,IAAIN,GAAR,GAAc,MAAd,GAAuB,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAhC,gBAAyH;AAAA;AAAA;AAAA;AAAA,kBAP5H;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAAsCM,IAAtC;AAAA;AAAA;AAAA;AAAA,cADF;AAcD,KAjBD,CADF;AAoBD;;AAED,MAAI,CAACT,MAAL,EAAa;AACX,wBACE,QAAC,IAAD;AAAA,6BACE,QAAC,IAAD,CAAM,IAAN;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAbD,MAaO;AACL,wBACE,QAAC,IAAD;AAAA,6BACE,QAAC,IAAD,CAAM,IAAN;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,EAAE,EAAC,KAAd;AAAoB,UAAA,KAAK,EAAE;AAACc,YAAAA,SAAS,EAAE,MAAZ;AAAoBC,YAAAA,SAAS,EAAE;AAA/B,WAA3B;AAAA,iCACE,QAAC,QAAD;AAAA,sBACGV,QAAQ,CAACJ,KAAD;AADX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;AACF,CAvDD;;GAAMF,K;;KAAAA,K;AAyDN,eAAeA,KAAf","sourcesContent":["import { useContext } from \"react\"\nimport Card from \"react-bootstrap/Card\"\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport UserContext from \"../contexts/UserContext\"\n\nconst Right = ({parsed, queue, handleAdd, add }) => {\n  const { user } = useContext(UserContext)\n\n  function mapQueue(queue) {\n    return (\n      Object.keys(queue)\n      .filter( word => word !== \" \")\n      .map((word) => {\n        return (\n          <Card style={{ minWidth: \"60%\"}} key={word}>\n            <Card.Body >\n              <Card.Title>\n                {word}\n              </Card.Title>\n              <Card.Text>\n                {queue[word]}\n              </Card.Text>\n              {localStorage.getItem(\"token\") ? <button value = {word} onClick = {handleAdd}> {word in add ? \"Drop\" : \"Add\" }</button> : <br/>}\n              \n            </Card.Body>\n          </Card>\n        )\n      })\n    )\n  }\n\n  if (!parsed) {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            Translations\n          </Card.Title>\n          <Card.Text>\n            You don't have any translations yet\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  } else {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            Translations\n          </Card.Title>\n          <Card.Text as=\"div\" style={{overflowY: \"auto\", maxHeight: \"400px\"}}>\n            <CardDeck>\n              {mapQueue(queue)}\n            </CardDeck>\n          </Card.Text>  \n        </Card.Body>\n      </Card>\n    )\n  }\n}\n\nexport default Right;"]},"metadata":{},"sourceType":"module"}